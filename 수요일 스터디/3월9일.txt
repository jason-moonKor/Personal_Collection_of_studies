리액트 프롭스 드릴링을 해결하는법, 경험대답
리액트 라이프사이클
리액트 router의 동작방식에 대해

Props Drilling을 해결하기 위해서 어떤 시도를 했는가
React Life Cycle 순서대로
- 시간남으면 라스트 리액트 라우터의 동작방식

------------------------------

프롭스 드릴링이란?

Prop Drilling 은 props를 오로지 하위 컴포넌트로 전달하는 용도로만 쓰이는 컴포넌트들을 거치면서 React Component 트리의 한 부분에서 
다른 부분으로 데이터를 전달하는 과정입니다.
prop 전달이 3~5개 정도의 컴포넌트라면 Prop Drilling 는 문제가 되지 않습니다. 
하지만 prop 전달이 10개, 15개 같이 더 많은 과정을 거치게 된다면 코드를 읽을 때 해당 prop을 추적하기 힘들어집니다.
그렇기 때문에 유지보수도 더욱 어려워집니다.
과도한 Prop Drilling를 피하기 위해서는 여러 방법이 있습니다.

그중 하나로 전역 상태관리 라이브러리 사용
redux, MobX, recoil 등을 사용하여 해당 값이 필요한 컴포넌트에서 직접 불러서 사용할 수 있습니다.

또 하나는 Context 사용입니다

중앙집중형 상태 저장소(store)가 싫다면(즉, 일부 범위에서만 데이터를 공유하고 싶다면) context를 사용할 수 있다.

일반적인 React 애플리케이션에서 데이터는 위에서 아래로 (즉, 부모로부터 자식에게) props를 통해 전달되지만, 
애플리케이션 안의 여러 컴포넌트들에 전해줘야 하는 props의 경우 (예를 들면 선호 로케일, UI 테마) 이 과정이 번거로울 수 있습니다.
context를 이용하면, 트리 단계마다 명시적으로 props를 넘겨주지 않아도 많은 컴포넌트가 이러한 값을 공유하도록 할 수 있습니다.


Redux

Redux(리덕스)란 JavaScript(자바스트립트) 상태관리 라이브러리이다.
//Redux(리덕스)의 본질은 Node.js 모듈이다. 
단방향이기때문에 예측성이 쉬워서 유지보수가 쉽다.
Flux 구조

❗️Redux의 장점
상태를 예측 가능하게 만든다. (순수함수를 사용하기 때문)
유지보수 (복잡한 상태 관리와 비교)
디버깅에 유리 (action과 state log 기록 시) → redux dev tool (크롬 확장)
테스트를 붙이기 용의 (순수함수를 사용하기 때문)

❗️Redux의 기본 개념 : 세 가지 원칙
1. Single source of truth
동일한 데이터는 항상 같은 곳에서 가지고 온다.
즉, 스토어라는 하나뿐인 데이터 공간이 있다는 의미이다.
2. State is read-only
리액트에서는 setState 메소드를 활용해야만 상태 변경이 가능하다.
리덕스에서도 액션이라는 객체를 통해서만 상태를 변경할 수 있다.
3. Changes are made with pure functions
변경은 순수함수로만 가능하다.
리듀서와 연관되는 개념이다.
Store(스토어) – Action(액션) – Reducer(리듀서)

❗️Store, Action, Reducer의 의미와 특징

🧺 Store (스토어)
Store(스토어)는 상태가 관리되는 오직 하나의 공간이다.
컴포넌트와는 별개로 스토어라는 공간이 있어서 그 스토어 안에 앱에서 필요한 상태를 담는다.
컴포넌트에서 상태 정보가 필요할 때 스토어에 접근한다.
📃 Action (액션)
Action(액션)은 앱에서 스토어에 운반할 데이터를 말한다. (주문서)
Action(액션)은 자바스크립트 객체 형식으로 되어있다.
🎉 Reducer (리듀서)
Action(액션)을 Store(스토어)에 바로 전달하는 것이 아니다.
Action(액션)을 Reducer(리듀서)에 전달해야한다.
Reducer(리듀서)가 주문을 보고 Store(스토어)의 상태를 업데이트하는 것이다.
Action(액션)을 Reducer(리듀서)에 전달하기 위해서는 dispatch() 메소드를 사용해야한다.

Action(액션) 객체가 dispatch() 메소드에 전달된다.
dispatch(액션)를 통해 Reducer를 호출한다.
Reducer는 새로운 Store 를 생성한다.





리액트 라이프 사이클

https://kyun2da.dev/react/%EB%A6%AC%EC%95%A1%ED%8A%B8-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4%EC%9D%98-%EC%9D%B4%ED%95%B4/

크게 세가지 유형으로 나눌 수 있는데 생성 될때, 업데이트 할 때, 제거할 때이다. 이를 리액트에서는 마운트, 업데이트, 언마운트라고 한다

여기서 마운트는 DOM이 생성되고 웹 브라우저 상에서 나타나는 것을 뜻하고, 반대로 언마운트는 DOM에서 제거되는 것을 뜻한다.
주의하여 볼 것은 업데이트 부분인데, 업데이트는 다음과 같은 4가지 상황에서 발생한다.

props가 바뀔 때
state가 바뀔 때
부모 컴포넌트가 리렌더링 될 때
this.forceUpdate로 강제로 렌더링을 트리거할 때

함수형컴포넌트를 먼저 공부했기때문에 자세히는 모른다고 해야함.. => 최수의 수단\

useEffect와 유사한 기능을 한다고 공식문서에서 나왔다.




리액트 라우터란?

history.replaceState({}, '', 'test');     => url만 바꿀수있음

url이 바뀌면 해당 url을 찾아내서 그에맞는 페이지를 뿌려준다. (새로고침X)

url에 대한 상태를 갖고있고 상태가 변경될때마다 스테이트의 변동사항이 나타나게 되는데
상태가 바뀜에따라 어떤화면을 보여줘야하는지

Routing 이란?
URL에 따라서 그에 상응하는 화면을 전송해주는 것을 Routing이라고 한다.
React Router 라이브러리는 비교적 쉽게 라우팅이 가능하도록 도와준다

✔ 라우터 핵심 컴포넌트
Link 컴포넌트
html 에서 <a /> 태그와 유사한 기능을 하는 컴포넌트. to = '' 로 이동할 경로를 지정해줌.

Route 컴포넌트
<Route> 컴포넌트는 현재 주소창의 경로와 매치될 경우 보여줄 컴포넌트를 지정하는데 사용된다. path prop을 통해서 매치시킬 경로를 지정하고 component prop을 통해서 매치되었을 때 보여줄 컴포넌트를 할당한다.

Router 컴포넌트
<Router /> 컴포넌트는 <Route /> 컴포넌트와 <Link /> 컴포넌트가 유기적으로 동작하도록 묶어주는데 사용함.
<Route>와 <Link> 컴포넌트는 DOM 트리 상에서 항상 를 공통 상위 컴포넌트로 가져야한다.
=> HashRouter, BrowserRouter, StaticRouter, MemoryRouter

---------

이력서
1분 자기소개준비
왜 직업 바꿨는지