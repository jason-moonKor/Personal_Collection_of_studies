타입스크립트란:마이크로소프트에서 구현한 JavaScript의 슈퍼셋(Superset) 프로그래밍 언어. 확장자로는 .ts를 사용[1]하며, 컴파일의 결과물로 JavaScript 코드를 출력한다. 
최종적으로 런타임에서는 이렇게 출력된 JavaScript 코드를 구동시키게 된다.
자바스크립트를 실제로 사용하기 전에 있을만한 타입 에러들을 미리 잡는 것' 이 타입스크립트의 사용 목적이다.

타입스크립트 전반적인 설명 및 예시 사이트 : https://www.samsungsds.com/kr/insights/TypeScript.html

과거엔 브라우저에서 가벼운 처리를 위해 도입한 단일 스레드와 비동기모델이 단점으로 지적되었지만, 현대의 멀티코어 병렬 프로그래밍 환경에는
적합한 메커니즘으로 인식되는 역설적인 상황이 벌어지고 있다.

자바스크립트 프로그래머들이 가장 크게 고통받는 문제인 타입 불안전성을 해결할 수 있는 타입스크립트가 대두되면서 타입 불안전성을 비판하던 목소리까지
잠재우고 있다.

타입스크립트는 자바스크립트 개발을 더 안전하고 즐겁게 만든다.

자바스크립트로 동작하는 미사일은 존재하지 않겠지만, 제임스 웹 우주망원경에는 자바스크립트가 들어가있다.

타입스크립트는 고수준언어인 자바스크립트로 컴파일되며 실행역시 자바스크립트로 이루어진다

모든 자바스크립트는 타입스크립트지만, 모든 타입스크립트가 자바스크립트는 아니다.
자바스크립트는 타입스크립트의 부분집합이다. (타입스크립트 안에 자바스크립트가 있는 개념)

(깃헙 클론 및 fork 완료)

========타입스크립트와 자바스크립트와의 관계를 설명


------------------------------------
덕타이핑 : 오리처럼 꽥꽥거리고 오리처럼 걷는다면, 그것은 오리다. 즉, 객체의 적합성은 객체의 타입이 아닌 객체가 가지고 있는 속성이나 메서드에 따라 결정된다는 것이다. 
타입을 미리 정하는게 아니라 실행이 되었을 때 해당 Method들을 확인하여 타입을 정한다.
쉽게 말해서, 다른 클래스라도 같은 이름의 메서드를 가지고 있다면 두 클래스의 타입이 같다고 본다는 것이다. 

장점
타입에 대해 매우 자유롭다.
런타임 데이터를 기반으로 한 기능과 자료형을 창출하는 것

단점
런타임 자료형 오류가 발생할 수 있다
------------------------------------


MOCK : 모의 객체(Mock Object)란 주로 객체 지향 프로그래밍으로 개발한 프로그램을 테스트 할 경우 테스트를 수행할 모듈과 연결되는 외부의 다른 서비스나 모듈들을 
실제 사용하는 모듈을 사용하지 않고 실제의 모듈을 "흉내"내는 "가짜" 모듈을 작성하여 테스트의 효용성을 높이는데 사용하는 객체이다. 
사용자 인터페이스(UI)나 데이터베이스 테스트 등과 같이 자동화된 테스트를 수행하기 어려운 때 널리 사용된다.

실제 객체를 만들어 사용하기에 시간, 비용 등의 Cost가 높거나 혹은 객체 서로간의 의존성이 강해 구현하기 힘들 경우 가짜 객체를 만들어 사용하는 방법이다.

= like 더미??

자스는 덕타이핑 기반, 타입은 봉인되어있지않다. 타입이 열려있다는 것은 타입의 확장에 열려있다는 의미. 타입에 선언된 속성 이외에 임의의 속성을
추가하더라도 오류가 발생하지 않는다. = 고양이라는 타입에 크기속성을 추가해서 작은고양이가 되어도 고양이라는 사실은 변하지 않는다.

any 타입 지양하기.
any타입을 사용하면 타입체커와 타스언어서비스를 사용하지못한다. 진짜 문제점을 감추며, 타입시스템의 신뢰도를 떨어뜨림. 사용을 최대한 피하자
? = 그렇다면 any는 언제사용하나? 필요한가?

===================
closure (폐쇄)

=========

========

함수를 어디서 '호출'하였는지 = 동적 스코프(Dynamic scope)
함수를 어디서 '선언'하였는지 = 렉시컬 스코프(Lexical scope) 또는 정적 스코프(Static scope)

자바스크립트는 정적스코프( static scope ) , 어휘적 스코프( lexical scope ) 이다.
그래서 함수를 어디서 '선언'하였는지가 중요하다.

렉시컬 스코프 (정적스코프) :  상위스코프를 결정하는 방식

함수안에 있는 함수는 부모함수가 가지고있는 변수 및 스코프, 유효범위등을 접근하여 사용할수있다.

클로저 요약:
함수와 렉시컬 환경의 조합
함수가 생성될 당시의 외부 변수를 기억
생성 이후에도 계속 접근 가능

const x = 1;

function foo() {
  const x = 10;
  bar();
}

function bar() {
  console.log(x);
}

foo();
bar();




var x = 'xxx';

function foo () {   // 2. foo 함수 호출
  var y = 'yyy';

  function bar () { // 4. bar 함수호출
    var z = 'zzz';
    console.log(x + y + z);  //5. console.log 실행
  }
  bar(); //3. bar 실행
}
foo();   //1. foo 실행


====================


궁금증 : 
자바스크립트 최상단에 "use stricts" 를 쓰는것과 타입스크립트랑의 관계.
타입스크립트가 왜 바닐라자바스크립트보다 빠른지->단지 변수 및 타입의정의를 개발자가 미리 지정해 주기 때문에?
타입스크립트를 쓰는 이유는 단지 문법의 엄격함을 높여서 에러 및 보안을 강화하는 이유?


=================================2장 시작============================

타입스크립트를 설치하면 아래의 두가지를 실행할수있다.
1. 타입스크립트 컴파일러
2. 단독으로 실행할 수 있는 타입스크립트 서버(tsserver)

타입스크립트 언어 서비스를 적극 이용한다. 이유는 어떻게 타입시스템이 작동하는지, 어떻게 타입을 추론하는지 개념을 잡을수있다

타스 코드를 읽을때 타입이닞 값인지 구분하는 방법을 터득해야한다.
모든값은 타입을 가지지만 타입은 값을 가지지 않는다
타입단언(as Type)보다 타입선언(:Type)을 사용해야 한다
잉여속성체크는 오류를 찾는 효과적인 방법이지만 잉여속성체크는 한계가 있다.
함수 표현식 전체에 타입구문을 적용하는것이 좋다.
dont repeat yourself (DRY) 원칙을 타입에도 최대한 적용해야 좋다 DRY=같은 코드를 반복하지 말라는 뜻.
타입에 이름을 붙여서 반복을 피해야한다.
런타임떄까지 객체의 속성을 알수없을경우에만 인덱스 시그니처를 사용한다.
배열은 객체이므로 키는 숫자가 아니라 문자열이다.
인덱스 시그니처에 number를 사용하기보단 어레이나 튜플 또는 에러이라이크타입을 사용하는것이 좋다



자스와 타스의 차이
타입 가드는 어떻게 하느냐
네이버를 주소창에 치면 내화면에 어떻게 랜더링이 되는지 ?어떤일이 일어나느지?
브라우저 랜더링에대해 구체적으로 설명하시오
flux와 redux 공부공부
