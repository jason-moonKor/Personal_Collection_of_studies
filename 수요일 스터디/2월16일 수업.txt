DNS조회부터 브라우져에 화면이 노출되기까지의 과정
그리고 브라우져 렌더링 과정
그리고 실행컨텍스트

---------

브라우저란?
익스플로러, 크롬, 파이어폭스 등의 툴로
자바스크립트등의 코드와 같은 정보들을 불러와서
디지털 기기 화면에 보여주는 역할을 하는 응용소프트웨어다.

DNS가 루트도메인부터 거꾸로 들어간다.
웹브라우저는 url주소를 입력받으면 DNS에게 해당url IP주소를 물어본다
dns에게 IP주소를 받으면 랜덤한 번호를 받고 서버로 간다 -> IP주소를 가지고 TCP연결을 서버랑 한다.
서버는 번호에 +1을 해서 클라이언트에게 주고 클라이언트는 이번호에+1을
더해서 다시 서버로 준다. 이 번호표를 주는것을 3웨이 핸드쉐이크라고한다
서버에게 서버자료를 요청한다(HTTP REQUEST)
서버가 클라이언트에게 응답하는걸(HTTP RESPONSE)
브라우저는 서버에게받은 자료를 사용자에게 이해할수있게 뿌려준다

해석할때는 웹표준어기구인 W3C 명세에 따라 데이터를 해석(PARSING)
HTML를 파싱해서 DOM Tree를 만든다. 이때 CSS파일을 만난다면
하던걸 멈추고 CSSOM TREE 를 생성해서 파싱한다
CSS 파싱을 마치면 멈췄던HTML파싱을 시작한다
자바스크립트 태그를 만나면 하던걸 멈추고 자바스크립트엔진을 실행한다(크롬에 V8)
끝나면 AST(Abstract Syntax Tree = 추상 구문 트리)를 만들고 실행
DOM tree + CSSOM Tree = Render Tree 이 과정까지를 컨스트럭션이라고 함
Layout(노드배치) -> Paint(화면에 그림) -> Composition(순서대로 나열) 이 과정을 Operation이라고함

HTML,CSS 오브젝트모델로 만들어서 접근할수있게 만든다 -> 두개의 트리를 가지고 렌더트리를 가지고 준비 -> 레이아웃(리플로우)하고 페인트로 그려준다.



질문)리액트는 가상돔을 만드는데 가상돔에서 만든건 한번 해석하고 실제 DOM에 가는지?
============	공부해보기!!



- 실행 컨텍스트(execution context)

자바스크립트 실행 컨텍스트는 실행가능한 코드를 형상화 하고 구분하는 추상적인 개념
자바스크립트 코드가 실행이 되는 환경 정도로 이해하면 된다.
​
한수란? 변수, 매개변수, 내장함수, this 등
자바스크립트에서 실행 컨텍스트가 생성되는 조건은 다음과 같다.
1 함수 실행 -> Activation Object (AO) : 함수선언, 매개변수, 변수
2 전역 실행 -> Global Object (GO) : 빌트인객체(math, string등) bom, dom, 전역변수
  - this object
  - window object
3 eval() 실행 -> 많이쓰지않고 신경크게 안써도됨   =>>> eval함수는 보안상으로 굉장히 취약하므로 쓰면안된다
eval()은 문자로 표현된 JavaScript 코드를 실행하는 함수
console.log(eval('2 + 2'));
// expected output: 4

console.log(eval(new String('2 + 2')));
// expected output: 2 + 2

console.log(eval('2 + 2') === eval('4'));
// expected output: true

console.log(eval('2 + 2') === eval(new String('2 + 2')));
// expected output: false

호이스팅이란
자바스크립트 함수는 실행되기 전에 함수 안에 필요한 변수값들을 모두 모아서 유효 범위의 최상단에 선언한다.
자바스크립트 Parser가 함수 실행 전 해당 함수를 한 번 훑는다.
함수 안에 존재하는 변수/함수선언에 대한 정보를 기억하고 있다가 실행시킨다.
유효 범위: 함수 블록 {} 안에서 유효
즉, 함수 내에서 아래쪽에 존재하는 내용 중 필요한 값들을 끌어올리는 것이다.
실제로 코드가 끌어올려지는 건 아니며, 자바스크립트 Parser 내부적으로 끌어올려서 처리하는 것이다.
실제 메모리에서는 변화가 없다.
호이스팅의 대상
var 변수 선언과 함수선언문에서만 호이스팅이 일어난다.
var 변수/함수의 선언만 위로 끌어 올려지며, 할당은 끌어 올려지지 않는다.
let/const 변수 선언과 함수표현식에서는 호이스팅이 발생하지 않는다.
https://gmlwjd9405.github.io/2019/04/22/javascript-hoisting.html


This Binding





- 디바운스란?
짧은 시간 간격으로 이벤트가 연속해서 발생하면 이벤트 핸들러를 호출하지 않다가 일정 시간이 경과한 이후에 이벤트 핸들러가 한 번만 호출되도록 한다.
즉, 디바운스는 짧은 시간 간격으로 발생하는 이벤트를 그룹화해서 마지막에 한 번만 이벤트 핸들러가 호출되도록 한다.
디바운스는 resize 이벤트 처리나 input 요소에 입력된 값으로 AJAX 요청하는 입력 필드 자동완성 UI 구현, 버튼 중복 클릭 방지 처리 등에 유용하게 사용된다.

디바운스 CODE :

document.querySelector(".search-box").addEventListener(
  "input",
  debounce((event) => {
    // Api Call
    console.log(event.target.value);
  }, 1000)
);

function debounce(func, delay) {

  // timeoutID를 할당할 변수를 선언합니다.
  let timer = null;
  
  // timer 변수에 접근 가능한 클로저 함수를 반환합니다.
  return function (...args) {
  
    // 만약 타이머가 존재한다면 타이머를 취소시킵니다.
    if (timer) {
      clearTimeout(timer);
    }
    
    // 타이머를 새로 만듭니다.
    timer = setTimeout(() => func(...args), delay);
  }
}






- 쓰로틀 Throttle

짧은 시간 간격으로 이벤트가 연속해서 발생하더라도 일정 시간 간격으로 이벤트 핸들러가 최대 한 번만 호출되도록 한다.
▶ 함수 호출 주기 동안 함수가 한 번만 호출된다.
즉, 스로틀은 짧은 시간 간격으로 연속해서 발생하는 이벤트를 그룹화해서 일정 시간 단위로 이벤트 핸들러가 호출되도록 호출 주기를 만든다.

스로틀은 scroll 이벤트 처리나 무한 스크롤(infinite scrolling) UI 구현 등에 유용하게 사용된다.

실무에서는 Underscore 또는 Lodash의 throttle 함수를 사용하는 것을 권장한다.

*Lodash는 자바스크립트의 라이브러리다.
여러가지 기능이있지만 배열이나 객체의 정렬 (sordby, orderby)이나 디바운스, 스로틀기능을 주로 많이씀




브라우저에서 url을 치면 브라우저는 DNS서버에 요청한 url에 IP주소를 물어본다
DNS는 IP와 랜덤한 숫자를 하나 주고 브라우저는 받은 IP주소서버에 간다
서버는 클라이언트에게 받은 숫자에 +1을해서 클라이언트로 주고 클라이언트는 그 숫자에 또 +1를 해서 서버로 준다 -> 3웨이핸드쉐이크
서버에게 서버자료를 요청한다(HTTP REQUEST)
서버가 클라이언트에게 응답하는걸(HTTP RESPONSE)
브라우저는 서버에게받은 자료를 사용자에게 이해할수있게 뿌려준다





자바스크립트에서 This 란 뭔가요?
호이스팅이 일어나는 이유?
스코프체인이란?
브라우저 렌더링에대해 자세히 면접때 말하듯이 연습
